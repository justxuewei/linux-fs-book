$ grep SYSCALL *.c | grep mkdir
namei.c:SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)
namei.c:SYSCALL_DEFINE2(mkdir, const char __user *, pathname, umode_t, mode)

SYSCALL_DEFINE3(mkdirat, int, dfd, const char __user *, pathname, umode_t, mode)
{
    return do_mkdirat(dfd, getname(pathname), mode);
}

SYSCALL_DEFINE2(mkdir, const char __user *, pathname, umode_t, mode)
{
    return do_mkdirat(AT_FDCWD, getname(pathname), mode);
}

--------------------------------------------------------------------------------

do_mkdirat() will call filename_create() which needs to resolve the pathname. If the base filename does not exist, a negative dentry will be returned. A call will then be made to vfs_mkdir() passing the parent inode and the -ve dentry.

This was confirmed in gdb.

int do_mkdirat(int dfd, struct filename *name, umode_t mode)
{
    struct dentry *dentry;
    struct path path;
    int error;
    unsigned int lookup_flags = LOOKUP_DIRECTORY;

    dentry = filename_create(dfd, name, &path, lookup_flags);
    error = security_path_mkdir(&path, dentry,
            mode_strip_umask(path.dentry->d_inode, mode));
    if (!error) {
        error = vfs_mkdir(mnt_idmap(path.mnt), path.dentry->d_inode,
                  dentry, mode);
    }
    done_path_create(&path, dentry);
}

---------

static struct dentry *filename_create(int dfd, struct filename *name,
                      struct path *path, unsigned int lookup_flags)
{       
    struct dentry *dentry = ERR_PTR(-EEXIST);
    struct qstr last;
    bool want_dir = lookup_flags & LOOKUP_DIRECTORY;
    unsigned int reval_flag = lookup_flags & LOOKUP_REVAL;
    unsigned int create_flags = LOOKUP_CREATE | LOOKUP_EXCL;
    int type;
    int err2;
    int error;

    error = filename_parentat(dfd, name, reval_flag, path, &last, &type);

    /*
     * Yucky last component or no last component at all?
     * (foo/., foo/.., /////)
     */
    if (unlikely(type != LAST_NORM))
        goto out;

    /* don't fail immediately if it's r/o, at least try to report other errors */
    err2 = mnt_want_write(path->mnt);
    /*
     * Do the final lookup.  Suppress 'create' if there is a trailing
     * '/', and a directory wasn't requested.
     */
    if (last.name[last.len] && !want_dir)
        create_flags = 0;
    inode_lock_nested(path->dentry->d_inode, I_MUTEX_PARENT);
    dentry = __lookup_hash(&last, path->dentry, reval_flag | create_flags);

    if (d_is_positive(dentry))
        goto fail;

    /*
     * Special case - lookup gave negative, but... we had foo/bar/
     * From the vfs_mknod() POV we just have a negative dentry -
     * all is fine. Let's be bastards - you had / on the end, you've
     * been asking for (non-existent) directory. -ENOENT for you.
     */
    if (unlikely(!create_flags)) {
        error = -ENOENT;
        goto fail;
    }
    if (unlikely(err2)) {
        error = err2;
        goto fail;
    }
    return dentry;
fail:
    dput(dentry);
    dentry = ERR_PTR(error);
unlock:
    inode_unlock(path->dentry->d_inode);
    if (!err2)
        mnt_drop_write(path->mnt);
out:
    path_put(path);
    return dentry;
}

----

int vfs_mkdir(struct mnt_idmap *idmap, struct inode *dir,
          struct dentry *dentry, umode_t mode)
{
    int error;
    unsigned max_links = dir->i_sb->s_max_links;

    error = may_create(idmap, dir, dentry);

    mode = vfs_prepare_mode(idmap, dir, mode, S_IRWXUGO | S_ISVTX, 0);
    error = security_inode_mkdir(dir, dentry, mode);

    if (max_links && dir->i_nlink >= max_links)
        return -EMLINK;

    error = dir->i_op->mkdir(idmap, dir, dentry, mode);
    return error;
}

