proc_create_single(...)

    -> call proc_create_single_data() passing NULL as last parameter

    -> proc_create_single_data( ... ,  data | NULL)     - generic.c

and example from fs/filesystems.c:

    proc_create_single("filesystems", 0, NULL, filesystems_proc_show);

--------------------------------------------------------------------------------

struct proc_dir_entry *
proc_create_single_data(const char             *name, 
                        umode_t                 mode,
                        struct proc_dir_entry  *parent,
                        int (*show)(struct seq_file *, void *), 
                        void                    *data)
{
    struct proc_dir_entry *p;

    p = proc_create_reg(name, mode, &parent, data);
    if (!p)
        return NULL;
    p->proc_ops = &proc_single_ops;
    p->single_show = show;
    return proc_register(parent, p);
}

- parent is often NULL
- XXX single_show - only one function so there must be more that have more ops?

--------------------------------------------------------------------------------

proc_create_reg() and proc_register()

struct proc_dir_entry *proc_create_reg(const char *name, umode_t mode,
        struct proc_dir_entry **parent, void *data)
{
    struct proc_dir_entry *p;

    p = __proc_create(parent, name, mode, 1);
    if (p) {
        p->proc_iops = &proc_file_inode_operations;
        p->data = data;
    }  
}

Inside __proc_create()

    struct proc_dir_entry *ent = NULL;

    ent = kmem_cache_zalloc(proc_dir_entry_cache, GFP_KERNEL);

    memcpy(ent->name, fn, qstr.len + 1);
    ent->namelen = qstr.len;
    ent->mode = mode;
    ent->nlink = nlink;
    ent->subdir = RB_ROOT;

Note:

    #define RB_ROOT (struct rb_root) { NULL, }

For proc_register():

    if (proc_alloc_inum(&dp->low_ino))
    dp->parent = dir;
    if (pde_subdir_insert(dir, dp) == false) {
    ...

--------------------------------------------------------------------------------

The tree and proc_root ...

proc_dir_entry is defined in proc/internal.h

struct proc_dir_entry proc_root = {
    .low_ino    = PROC_ROOT_INO,
    .namelen    = 5,
    .mode       = S_IFDIR | S_IRUGO | S_IXUGO,
    .nlink      = 2,
    .refcnt     = REFCOUNT_INIT(1),
    .proc_iops  = &proc_root_inode_operations,
    .proc_dir_ops   = &proc_root_operations,
    .parent     = &proc_root,
    .subdir     = RB_ROOT,
    .name       = "/proc",
}

proc_root_init() does all the intialization setting up some nodes:

void __init proc_root_init(void)
{   
    proc_symlink("mounts", NULL, "self/mounts");
    proc_net_init();
    proc_mkdir("fs", NULL);
    proc_mkdir("driver", NULL);
    proc_create_mount_point("fs/nfsd"); 
    proc_tty_init();
    proc_mkdir("bus", NULL);
    proc_sys_init();

    register_filesystem(&proc_fs_type);
}

During runtime, here are ptrs for nodes:

  parent = 0xffff80000a61dfe8 <proc_root>,
  subdir = {
    rb_node = 0xffff0000c01bc808
  },
  subdir_node = {
    __rb_parent_color = 0,
    rb_right = 0x0,
    rb_left = 0x0
  },


--------------------------------------------------------------------------------

proc_mkdir(...)

There is a proc_mkdir() and proc_mkdir_data() similar to single and single_data

proc_mkdir() calls proc_mkdir_data() which calls _proc_mkdir()

_proc_mkdir(const char *name, umode_t mode,
        struct proc_dir_entry *parent, void *data, bool force_lookup)
{
    ent = __proc_create(&parent, name, S_IFDIR | mode, 2);
    if (ent) {
        ent->data = data;
        ent->proc_dir_ops = &proc_dir_operations;
        ent->proc_iops = &proc_dir_inode_operations;
        if (force_lookup) {
            pde_force_lookup(ent);
        }
        ent = proc_register(parent, ent);
    }

