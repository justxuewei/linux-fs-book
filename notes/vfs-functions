dax.c:	err = vfs_fsync_range(vmf->vma->vm_file, start, start + len - 1, 1);
eventpoll.c:		res = vfs_poll(file, pt);
fs_context.c:	ret = vfs_parse_sb_flag(fc, param->key);
fs_context.c:	ret = vfs_parse_fs_param_source(fc, param);
fs_context.c:	ret = vfs_parse_fs_param(fc, &param);
fs_context.c:			ret = vfs_parse_fs_string(fc, key, value, v_len);
fsopen.c:		ret = vfs_get_tree(fc);
fsopen.c:		ret = vfs_fsconfig_locked(fc, cmd, &param);
init.c:	error = vfs_getattr(&path, stat, STATX_BASIC_STATS,
init.c:		error = vfs_mknod(mnt_user_ns(path.mnt), path.dentry->d_inode,
init.c:	error = vfs_link(old_path.dentry, mnt_userns, new_path.dentry->d_inode,
init.c:		error = vfs_symlink(mnt_user_ns(path.mnt), path.dentry->d_inode,
init.c:		error = vfs_mkdir(mnt_user_ns(path.mnt), path.dentry->d_inode,
init.c:	error = vfs_utimes(&path, ts);
io_uring.c:	ret = vfs_fallocate(req->file, req->sync.mode, req->sync.off,
io_uring.c:	ret = vfs_fadvise(req->file, fa->offset, fa->len, fa->advice);
ioctl.c:	cloned = vfs_clone_file_range(src_file.file, off, dst_file, destoff,
ioctl.c:	ret = vfs_dedupe_file_range(file, same);
ioctl.c:	err = vfs_fileattr_get(file->f_path.dentry, &fa);
ioctl.c:			err = vfs_fileattr_set(mnt_userns, dentry, &fa);
ioctl.c:		error = vfs_ioctl(f.file, cmd, arg);
libfs.c:		mnt = vfs_kern_mount(type, SB_KERNMOUNT, type->name, NULL);
locks.c:	error = vfs_setlease(filp, arg, &fl, (void **)&new);
locks.c:	error = vfs_test_lock(filp, fl);
locks.c:		error = vfs_lock_file(filp, cmd, fl, NULL);
namei.c:	child = vfs_tmpfile(mnt_userns, path.dentry, op->mode, op->open_flag);
namei.c:		error = vfs_open(&path, file);
namei.c:			error = vfs_create(mnt_userns, path.dentry->d_inode,
namei.c:	error = vfs_rmdir(mnt_userns, path.dentry->d_inode, dentry);
namei.c:		error = vfs_unlink(mnt_userns, path.dentry->d_inode, dentry,
namei.c:	error = vfs_rename(&rd);
namespace.c:	mnt = vfs_create_mount(fc);
namespace.c:	err = vfs_path_lookup(m->mnt_root, m,
read_write.c:		offset = vfs_setpos(file, file->f_pos + offset, maxsize);
read_write.c:		loff_t res = vfs_llseek(f.file, offset, whence);
read_write.c:		ret = vfs_read(f.file, buf, count, ppos);
read_write.c:		ret = vfs_write(f.file, buf, count, ppos);
read_write.c:		ret = vfs_readv(f.file, vec, vlen, ppos, flags);
read_write.c:		ret = vfs_writev(f.file, vec, vlen, ppos, flags);
read_write.c:	ret = vfs_copy_file_range(f_in.file, pos_in, f_out.file, pos_out, len,
remap_range.c:		dst_folio = vfs_dedupe_get_folio(dest, dstoff);
remap_range.c:		ret = vfs_dedupe_file_range_compare(file_in, pos_in,
remap_range.c:		deduped = vfs_dedupe_file_range_one(file, off, dst_file,
splice.c:		ret = vfs_iter_write(out, &from, &sd.pos, 0);
stat.c:	error = vfs_stat(filename, &stat);
stat.c:	error = vfs_lstat(filename, &stat);
stat.c:	int error = vfs_fstat(fd, &stat);
stat.c:	error = vfs_fstatat(dfd, filename, &stat, flag);
stat.c:				error = vfs_readlink(path.dentry, buf, bufsiz);
stat.c:	error = vfs_statx(dfd, filename, flags, &stat, mask);
statfs.c:		error = vfs_statfs(&path, st);
statfs.c:	int err = vfs_ustat(new_decode_dev(dev), &sbuf);
super.c:	total_objects = vfs_pressure_ratio(total_objects);
sync.c:		ret = vfs_fsync(f.file, datasync);
xattr.c:	error = vfs_getxattr(mnt_userns, d, kname, ctx->kvalue, ctx->size);
xattr.c:	error = vfs_listxattr(d, klist, size);
